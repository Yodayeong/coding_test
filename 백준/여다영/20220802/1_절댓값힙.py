#절댓값 힙

#문제
#절댓값 힙은 다음과 같은 연산을 지원하는 자료구조이다.
# 1.배열에 정수 x (x ≠ 0)를 넣는다.
# 2.배열에서 절댓값이 가장 작은 값을 출력하고, 그 값을 배열에서 제거한다. 절댓값이 가장 작은 값이 여러개일 때는, 가장 작은 수를 출력하고, 그 값을 배열에서 제거한다.
#프로그램은 처음에 비어있는 배열에서 시작하게 된다.

#입력
#첫째 줄에 연산의 개수 N(1≤N≤100,000)이 주어진다. 다음 N개의 줄에는 연산에 대한 정보를 나타내는 정수 x가 주어진다. 만약 x가 0이 아니라면 배열에 x라는 값을 넣는(추가하는) 연산이고, x가 0이라면 배열에서 절댓값이 가장 작은 값을 출력하고 그 값을 배열에서 제거하는 경우이다. 입력되는 정수는 -231보다 크고, 231보다 작다.

#출력
#입력에서 0이 주어진 회수만큼 답을 출력한다. 만약 배열이 비어 있는 경우인데 절댓값이 가장 작은 값을 출력하라고 한 경우에는 0을 출력하면 된다.


#heap을 활용하자.
#heap은 우선 순위대로 정렬해주므로, 입력 해줄 때부터 절댓값을 씌워주자.
# => abs(x) 함수 활용
#여러개가 충돌 할 때는 절댓값을 벗기고 비교해주자.

#여기서 궁금한 점.
#출력할 때, 절댓값이 아닌 원래의 수를 정렬해주지 않았는데 제대로 출력되더라.
#그러면 자동으로 원래의 수까지 고려해서 정렬해 주는 것인가?

import sys
import heapq
sys.stdin = open('1_절댓값힙.txt', 'r')

num = int(sys.stdin.readline())

heap = []
for i in range(num):
    x = int(sys.stdin.readline())

    if x != 0:
        #숫자를 마주치면, heap에 절댓값과 원래의 수를 모두 넣어준다.
        #list는 넣을 수 없다기에, 튜플형을 써줬다.
        heapq.heappush(heap, (abs(x), x))
    else:
        #0을 마주쳤는데
        if len(heap) == 0:
            #heap이 비어있으면 0을 출력
            print(0)
        else:
            #그게 아니라면 정렬된 heap에서 절댓값이 아닌 그냥 수 출력
            print(heapq.heappop(heap)[1])